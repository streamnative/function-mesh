name: Project Style Check
on: [pull_request]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.13, 1.14]
    steps:
      - name: clean disk
        run: |
          sudo swapoff -a
          sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt clean
          docker rmi $(docker images -q) -f
          df -h

      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: InstallKubebuilder
        run: |
          curl -L https://go.kubebuilder.io/dl/2.3.1/linux/amd64 | tar -xz -C /tmp/
          sudo mv /tmp/kubebuilder_2.3.1_linux_amd64 /usr/local/kubebuilder
          export PATH=$PATH:/usr/local/kubebuilder/bin

      - name: InstallTool
        run: |
          wget -O - -q https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s v1.18.0
          ./bin/golangci-lint --version

      - name: BuildProject
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build -a -o manager main.go

      - name: CheckStyle
        run: |
          ./bin/golangci-lint run -c ./.golangci.yml ./...

      - name: Check License Header
        run: |
          go test license_test.go

      - name: Run unit test check
        run: go test -v ./controllers/spec/...

      - name: Run envtest for controller
        run: go test ./controllers/ -v -ginkgo.v

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.6.0/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          yq --help

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: tuteng
          password: ${{ secrets.IMAGE_GITHUB_TOKEN }}

      - name: Auto generate crd model 
        run: cd java-proxy && ./tool/generate-crd.sh

      - name: Format license
        run: cd java-proxy && mvn license:format

      - name: Run mesh proxy unit test
        run: cd java-proxy && mvn clean install

