setup:
  env: kind
  file: ../kind.yaml
  init-system-environment: ../env
  steps:
    - name: build images
      command: |
        chmod +x images/build.sh images/samples/build.sh
        PULSAR_IMAGE_TAG=2.9.2.23 PULSAR_IMAGE=streamnative/pulsar-all KIND_PUSH=true images/build.sh
        PULSAR_IMAGE_TAG=2.9.2.23 KIND_PUSH=true images/samples/build.sh

    - name: install helm
      command: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: setup cert-manager
      command: |
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        helm install cert-manager jetstack/cert-manager --set installCRDs=true --version v1.8.2
      wait:
        - namespace: default
          resource: pod
          label-selector: app=cert-manager
          for: condition=Ready

    - name: install pulsar cluster
      command: |
        helm repo add streamnative https://charts.streamnative.io
        rm -rf pulsar-charts/
        git clone --branch pulsar-operator-0.17.10 https://github.com/streamnative/charts.git pulsar-charts
        cd pulsar-charts/
        ./scripts/pulsar/prepare_helm_release.sh -n default -k ${PULSAR_RELEASE_NAME} -c
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        yq -i '.dependencies[0].repository = "https://grafana.github.io/helm-charts"' charts/pulsar/requirements.yaml
        helm dependency update charts/pulsar
        helm install ${PULSAR_RELEASE_NAME} --set initialize=true --values ../.ci/clusters/values_skywalking_e2e_cluster_with_tls.yaml charts/pulsar

    - name: wait for pulsar cluster ready
      command: |
        echo "wait until pulsar init job is completed"
        succeeded_num=0
        while [[ ${succeeded_num} -lt 1 ]]; do
          sleep 10
          kubectl get pods -n ${PULSAR_NAMESPACE}
          succeeded_num=$(kubectl get jobs -n ${PULSAR_NAMESPACE} ${PULSAR_RELEASE_NAME}-pulsar-pulsar-init -o jsonpath='{.status.succeeded}')
        done
        kubectl scale statefulset --replicas=1 ${PULSAR_RELEASE_NAME}-pulsar-bookie
      wait:
        - namespace: default
          resource: pod
          label-selector: app=pulsar
          for: condition=Ready

    - name: wait for producer active
      command: |
        kubectl exec -n ${PULSAR_NAMESPACE} ${PULSAR_RELEASE_NAME}-pulsar-toolset-0 -- bash -c 'until nslookup sn-platform-pulsar-broker; do sleep 3; done'
        kubectl exec -n ${PULSAR_NAMESPACE} ${PULSAR_RELEASE_NAME}-pulsar-broker-0 -- bin/pulsar-admin tenants create sn-platform
        kubectl exec -n ${PULSAR_NAMESPACE} ${PULSAR_RELEASE_NAME}-pulsar-broker-0 -- bin/pulsar-admin namespaces create sn-platform/test
        kubectl exec -n ${PULSAR_NAMESPACE} ${PULSAR_RELEASE_NAME}-pulsar-broker-0 -- bin/pulsar-client produce -m "test-message" sn-platform/test/test-topic
        kubectl exec -n ${PULSAR_NAMESPACE} ${PULSAR_RELEASE_NAME}-pulsar-bookie-0 -- df -h
        kubectl exec -n ${PULSAR_NAMESPACE} ${PULSAR_RELEASE_NAME}-pulsar-bookie-0 -- cat conf/bookkeeper.conf
        kubectl exec -n ${PULSAR_NAMESPACE} ${PULSAR_RELEASE_NAME}-pulsar-bookie-0 -- nc -zv 127.0.0.1 4181

    # upload packages here to avoid retry error
    - name: upload packages
      command: |
        bash .ci/upload_function.sh java
        bash .ci/upload_function.sh py
        bash .ci/upload_function.sh pyzip
        bash .ci/upload_function.sh pypip
        bash .ci/upload_function.sh go

    - name: update manifests to use tls endpoints
      command: |
        sed -i "s/logTopicAgent: sidecar/logTopicAgent: runtime/" .ci/tests/integration/cases/*/*.yaml
        sed -i "s/enabled: false/enabled: true/" .ci/tests/integration/cases/*/*.yaml
        sed -i "s/certSecretKey: \"\"/certSecretKey: ca.crt/" .ci/tests/integration/cases/*/*.yaml
        sed -i "s/http:\/\/sn-platform-pulsar-broker.default.svc.cluster.local:8080/https:\/\/sn-platform-pulsar-broker.default.svc.cluster.local:8443/" .ci/tests/integration/cases/*/*.yaml
        sed -i "s/pulsar:\/\/sn-platform-pulsar-broker.default.svc.cluster.local:6650/pulsar+ssl:\/\/sn-platform-pulsar-broker.default.svc.cluster.local:6651/" .ci/tests/integration/cases/*/*.yaml

    - name: install function-mesh operator
      command: |
        make generate
        make helm-crds
        image="function-mesh-operator:latest"
        IMG=${image} make docker-build-skip-test
        kind load docker-image ${image}
        helm install ${FUNCTION_MESH_RELEASE_NAME} -n ${FUNCTION_MESH_NAMESPACE} --set operatorImage=${image} --create-namespace charts/function-mesh-operator
      wait:
        - namespace: function-mesh
          resource: pod
          label-selector: app.kubernetes.io/name=function-mesh-operator
          for: condition=Ready
  timeout: 60m

cleanup:
  # always never success failure
  on: success

verify:
  # verify with retry strategy
  retry:
    # max retry count
    count: 60
    # the interval between two attempts, e.g. 10s, 1m.
    interval: 10s
  cases:
      # java function test
    - query: bash .ci/tests/integration/cases/java-function/verify.sh
      expected: expected.data.yaml
    - query: bash .ci/tests/integration/cases/java-download-function/verify.sh true
      expected: expected.data.yaml
    - query: bash .ci/tests/integration/cases/py-download-function/verify.sh true
      expected: expected.data.yaml
    - query: bash .ci/tests/integration/cases/py-download-zip-function/verify.sh
      expected: expected.data.yaml
    - query: bash .ci/tests/integration/cases/py-download-pip-function/verify.sh
      expected: expected.data.yaml
    - query: bash .ci/tests/integration/cases/elasticsearch-sink/verify.sh true
      expected: expected.data.yaml
    - query: bash .ci/tests/integration/cases/mongodb-source/verify.sh true
      expected: expected.data.yaml
    - query: bash .ci/tests/integration/cases/crypto-function/verify.sh
      expected: expected.data.yaml
